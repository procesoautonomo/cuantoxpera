@inject IJSRuntime JS
@inject Services.MeetingService meetingService
@inject ILocalStorageService localStore
@inject NavigationManager navigationManager

@using System.Timers

@page "/juntada"
@page "/juntada/{id:int}"

@if (meetingService.ActualMeeting != null)
{
    <Title>@(meetingService.ActualMeeting.Friends.Count) amigos para dividir gastos.</Title>

    <CxpBreadcrumb MeetingName="@(meetingService.ActualMeeting.Name)" MeetingDate="@(meetingService.ActualMeeting.Date)" />

    <div id="Cpx-Juntada-Content" class="flex flex-wrap justify-center pt-12 pb-28 px-1 max-w-xl mx-auto">

        <CxpAddEditFriendCard EditingFriend="editingFriend" OnAddFriendButtonClick="AddFriend" OnButtonCloseClick="CalcelEditFriend" OnButtonOkClick="OkEditFriend" />

        @foreach (var _friend in meetingService.ActualMeeting.Friends)
        {
            <CxpFriendCard friend="_friend" OnButtonDeleteClickEvent="DeleteFriend" OnButtonEditClickEvent="EditFriend" />
        }

        @if (meetingService.ActualMeeting.Payments != null)
        {
            <CxpMeetingResult meeting="meetingService.ActualMeeting" />
        }

        <CxpNotification Friend="friend" Type="type" OnButtonUndoClick="UndoChange" OnButtonCloseClick="CloseNotification" />

        @if (showConfirm)
        {
            <CxpConfirmation OnClickCancelButton="CancelConfirmation" OnClickOkButton="OkConfirmation" />
        }

    </div>
}

@code {
    [Parameter]
    public int id { get; set; }

    NotificationType type;

    private Timer _NotificationTimer;

    Friend friend;
    Friend editingFriend;
    Friend confirmDeleteFriend;

    private bool showConfirm = false;

    //private Meeting meeting { get; set; }

    protected override void OnInitialized()
    {
        //meeting = await MeetingGeneratorHelper.Generate();

        //if (id == 0 || meeting is null)
        //{
        //    meeting = new Meeting()
        //    {
        //        Id = 1,
        //        Date = DateTime.Now,
        //        Name = "Juntada",
        //        Friends = new List<Friend>()
        //    };
        //}

        //ValorEnCascada.meeting = meeting;
        meetingService.OnChange += StateHasChanged;
    }

    private void CloseNotification()
    {
        type = NotificationType.None;
    }

    private void UndoChange()
    {
        meetingService.ActualMeeting.Friends.Add(friend);
        CloseNotification();
        Calculate();
    }

    private void AddFriend()
    {
        friend = new Friend();
        friend.Amount = 0;
        friend.Name = "";
        friend.CxpAmout = 0;
        friend.State = FriendState.Adding;

        editingFriend = friend;

        friend = null;
    }

    private void OkEditFriend()
    {
        friend = editingFriend;
        friend.State = FriendState.Save;
        meetingService.ActualMeeting.Friends.Add(friend);
        editingFriend = null;

        type = NotificationType.Info;

        SetTimerNotification(5000);

        Calculate();
    }

    private void CalcelEditFriend()
    {
        friend = editingFriend;
        if (friend.State == FriendState.Adding)
        {
            editingFriend = null;
        }
        else
        {
            friend.State = FriendState.Save;
            meetingService.ActualMeeting.Friends.Add(friend);
            editingFriend = null;

            Calculate();
        }
    }

    private void DeleteFriend(Friend fr)
    {
        confirmDeleteFriend = fr;
        showConfirm = true;
    }

    private void EditFriend(Friend fr)
    {
        meetingService.ActualMeeting.Friends.Remove(fr);
        friend = fr;
        friend.State = FriendState.Editig;
        editingFriend = friend;
        friend = null;
    }

    private async void Calculate()
    {
        meetingService.ActualMeeting.Payments = null;
        if (meetingService.ActualMeeting.Friends.Count >= 2)
        {
            meetingService.ActualMeeting.TotalAmount = meetingService.ActualMeeting.Friends.Sum(t => t.Amount);
            meetingService.ActualMeeting.CxpAmount = Math.Round(meetingService.ActualMeeting.Friends.Sum(t => t.Amount) / Convert.ToDecimal(meetingService.ActualMeeting.Friends.Count), 2);

            List<Payer> Deudores = new List<Payer>();
            List<Collector> Cobradores = new List<Collector>();
            List<Payment> Pagos = new List<Payment>();

            for (int l = 0; l < meetingService.ActualMeeting.Friends.Count; l++)
            {
                Friend amigo = meetingService.ActualMeeting.Friends[l];

                if (amigo.Amount < meetingService.ActualMeeting.CxpAmount)
                {
                    Payer deudor = new Payer();
                    deudor.PayerFriend = amigo;
                    deudor.DebitBalance = meetingService.ActualMeeting.CxpAmount - amigo.Amount;
                    Deudores.Add(deudor);
                    deudor = null;
                }
                else
                {
                    Collector cobrador = new Collector();
                    cobrador.CollertorFriend = amigo;
                    cobrador.CollectingBalance = amigo.Amount - meetingService.ActualMeeting.CxpAmount;
                    Cobradores.Add(cobrador);
                    cobrador = null;
                }

                amigo = null;
            }

            meetingService.ActualMeeting.Payers = Deudores;
            meetingService.ActualMeeting.Collectors = Cobradores;

            Deudores = null;
            Cobradores = null;


            Payer _deudor = null;
            Collector _cobrador = null;
            Payment _pago = null;
            decimal montoPagar = 0;
            int i = 0;
            int j = 0;

            for (i = 0; i < meetingService.ActualMeeting.Payers.Count; i++)
            {
                _deudor = meetingService.ActualMeeting.Payers[i];

                while (_deudor.DebitBalance != 0)
                {
                    for (j = 0; j < meetingService.ActualMeeting.Collectors.Count; j++)
                    {
                        _cobrador = meetingService.ActualMeeting.Collectors[j];
                        if (_cobrador.CollectingBalance != 0)
                        {
                            break;
                        }
                    }

                    if (j == meetingService.ActualMeeting.Collectors.Count)
                    {
                        break;
                    }

                    if (_deudor.DebitBalance >= _cobrador.CollectingBalance)
                    {
                        montoPagar = _cobrador.CollectingBalance;
                    }
                    else
                    {
                        montoPagar = _deudor.DebitBalance;
                    }

                    _deudor.DebitBalance -= montoPagar;
                    _cobrador.CollectingBalance -= montoPagar;

                    meetingService.ActualMeeting.Payers[i] = _deudor;
                    meetingService.ActualMeeting.Collectors[j] = _cobrador;

                    //hacer debug con 200, 0 y 900

                    _pago = new Payment();

                    _pago.FriendCollector = _cobrador;
                    _pago.FriendPayer = _deudor;
                    _pago.PaymentAmount = Math.Round(montoPagar, 2);
                    _pago.RoundedPaymentAmount = Math.Round(montoPagar, 2);

                    Pagos.Add(_pago);
                }
            }

            meetingService.ActualMeeting.Payments = Pagos;

            meetingService.ActualMeeting.ShareResultText = "";
            foreach (var pago in meetingService.ActualMeeting.Payments)
            {
                var titulo = "";
                if (meetingService.ActualMeeting.ShareResultText.Trim() == "")
                {
                    titulo = "¡Repartamos los pagos con Cuanto x Pera!\n\n";
                }
                meetingService.ActualMeeting.ShareResultText += (titulo + pago.FriendPayer.PayerFriend.Name + " le tiene que pagar a " + pago.FriendCollector.CollertorFriend.Name + " $" + pago.RoundedPaymentAmount.ToString() + ".\n\n");
            }
        }

        StateHasChanged();
        await localStore.SetItemAsync(meetingService.ActualMeetingKey, meetingService.ActualMeeting);
    }

    private void OkConfirmation()
    {
        meetingService.ActualMeeting.Friends.Remove(confirmDeleteFriend);

        friend = confirmDeleteFriend;
        type = NotificationType.Success;

        SetTimerNotification(20000);

        Calculate();
        showConfirm = false;
    }

    private void CancelConfirmation()
    {
        confirmDeleteFriend = null;
        showConfirm = false;
    }

    public void SetTimerNotification(double interval)
    {
        if (_NotificationTimer != null)
            _NotificationTimer.Enabled = false;

        _NotificationTimer = new Timer(interval);
        _NotificationTimer.Elapsed += NotifyTimerNotification;
        _NotificationTimer.Disposed += DisposeTimerNotification;
        _NotificationTimer.Enabled = true;
        _NotificationTimer.Stop();
        _NotificationTimer.Start();
    }

    private void DisposeTimerNotification(Object source, EventArgs e)
    {
        _NotificationTimer = null;
    }

    private void NotifyTimerNotification(Object source, ElapsedEventArgs e)
    {
        CloseNotification();
        _NotificationTimer.Enabled = false;
        _NotificationTimer.Dispose();
        InvokeAsync(StateHasChanged);
    }

}